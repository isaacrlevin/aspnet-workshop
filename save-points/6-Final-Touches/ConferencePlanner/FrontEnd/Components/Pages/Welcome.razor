@page "/Welcome"
@attribute [SkipWelcome]

@using FrontEnd.Components.Layout
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<h2>Welcome @User.UserName</h2>
<p>
    Register as an attendee to get access to cool features.
</p>

<EditForm Model="Input" method="post" OnValidSubmit="CreateUser" FormName="create">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />
    <ValidationSummary class="text-danger" role="alert" />
    <input @bind-value="Input.UserName" type="hidden" />
    <div class="form-group">
        <label for="firstname" class="form-label">Email</label>
        <div class="row">
            <div class="col-md-6">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="First Name" />
            </div>
        </div>
        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
    </div>
    <div class="form-group">
        <label for="lastname" class="form-label">Last Name</label>
        <div class="row">


            <div class="col-md-6">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" />
            </div>
        </div>
        <ValidationMessage For="() => Input.LastName" class="text-danger" />
    </div>
    <div class="form-group">
        <label for="email" class="form-label">Email Address</label>
        <div class="row">
            <div class="col-md-6">
                <InputText @bind-Value="Input.EmailAddress" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Input.EmailAddress" class="text-danger" />
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    public ApplicationUser User { get; set; } = new ApplicationUser();

    [SupplyParameterFromForm]
    private Attendee Input { get; set; } = new();

    private CustomValidation? customValidation;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.IsLoggedIn)
        {
            User = await UserManager.FindByNameAsync(AppState.UserName);
            if (!AppState.IsAttendee)
            {
                Input.UserName = User!.UserName!;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task CreateUser()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();
        var success = await ApiClient.AddAttendeeAsync(Input);

        if (!success)
        {
            errors.Add("", new List<string> { "There was an issue creating the attendee for this user." });
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            User.IsAttendee = true;
            await UserManager.UpdateAsync(User);
            await SignInManager.RefreshSignInAsync(User);
            NavigationManager.NavigateTo("/");
        }
    }
}