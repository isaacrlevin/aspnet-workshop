@page "/Session/{sessionId:int?}"

@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AppState AppState
@if (SelectedSession != null)
{

    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Agenda</a></li>
        <li class="breadcrumb-item"><a href="/@DayOffset">Day @(DayOffset + 1)</a></li>
        <li class="breadcrumb-item active">@SelectedSession!.Title</li>
    </ol>

    <h1>@SelectedSession.Title</h1>
    <span class="label label-default">@SelectedSession.Track?.Name</span>

    @foreach (var speaker in SelectedSession.Speakers)
    {
        <em><a href="/Speaker/@speaker.Id">@speaker.Name</a></em>
    }

    @foreach (var para in SelectedSession!.Abstract!.Split("\r\n", StringSplitOptions.RemoveEmptyEntries))
    {
        <p>@para</p>
    }

    <p>
        @if (AppState.IsAdmin)
        {
            <a href="/Admin/EditSession/@SelectedSession.Id" class="btn btn-default btn-sm">Edit</a>
        }
        @if (AppState.IsAttendee)
        {
            @if (IsInPersonalAgenda)
            {
                <button @onclick="RemoveSessionToUser" class="btn btn-default btn-sm" title="Remove from my personal agenda">
                    <i class="bi bi-star" aria-hidden="true"></i>
                </button>
            }
            else
            {
                <button @onclick="AddSessionToUser" class="btn btn-default btn-sm bg-transparent" title="Add to my personal agenda">
                    <i class="bi bi-star-outline" aria-hidden="true"></i>
                </button>
            }
        }
    </p>

}
@code {

    [Parameter] public int SessionId { get; set; }

    public SessionResponse? SelectedSession { get; set; }
    public int? DayOffset { get; set; }
    public bool IsInPersonalAgenda { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SessionId != null && SessionId != 0)
        {
            SelectedSession = await ApiClient.GetSessionAsync(SessionId);

            if (SelectedSession == null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                if (AppState.IsLoggedIn)
                {
                    var sessions = AppState.UserSessions;
                    IsInPersonalAgenda = sessions.Any(s => s.Id == SessionId);
                }

                var allSessions = await ApiClient.GetSessionsAsync();
                var startDate = allSessions.Min(s => s.StartTime?.Date);
                DayOffset = SelectedSession.StartTime?.Subtract(startDate ?? DateTimeOffset.MinValue).Days;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task AddSessionToUser()
    {
        await ApiClient.AddSessionToAttendeeAsync(AppState.UserName, SessionId);
        AppState.AddSessionToUser(SessionId);
        IsInPersonalAgenda = true;
    }

    private async Task RemoveSessionToUser()
    {
        await ApiClient.RemoveSessionFromAttendeeAsync(AppState.UserName, SessionId);
        AppState.RemoveSessionFromUser(SessionId);
        IsInPersonalAgenda = false;
    }
}